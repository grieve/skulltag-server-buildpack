#!/bin/sh
set -e

ROOT_DIR=`pwd`
BUILD_DIR=$1
CACHE_DIR=$2

indent() {
    sed -u 's/^/       /'
}

arrow() {
    sed -u 's/^/-----> /'
}


mktmpdir() {
    dir=$(mktemp -t fakesu-$1-XXXX)
    rm -rf $dir
    mkdir -p $dir
    echo $dir
}

WGET_BUILD="$(mktmpdir wget)"
DEBOOTSTRAP_BUILD="$(mktmpdir debootstrap)"
FAKECHROOT_BUILD="$(mktmpdir fakechroot)"

mkdir -p $BUILD_DIR/.tools/fakechroot
mkdir -p $CACHE_DIR/.tools/debootstrap

export PATH=/sbin:/usr/sbin:$PATH:$CACHE_DIR/.tools/debootstrap/usr/sbin:$BUILD_DIR/.tools/fakechroot/sbin:$BUILD_DIR/.tools/fakechroot/bin
export DEBOOTSTRAP_DIR=$CACHE_DIR/.tools/debootstrap/usr/share/debootstrap

echo "Fetching and installing debootstrap" | arrow
cd $DEBOOTSTRAP_BUILD
# temporary workaround until I find a way to pull from repos that doesn't explode
curl -O http://ryangrieve.com/labs/debootstrap_1.0.38.tar.gz >/dev/null 2>&1
tar zxvf debootstrap_1.0.38.tar.gz >/dev/null
cd debootstrap
DESTDIR=$CACHE_DIR/.tools/debootstrap fakeroot make >/dev/null
DESTDIR=$CACHE_DIR/.tools/debootstrap fakeroot make install >/dev/null
echo "debootstrap installed" | indent

echo "Fetching, installing and vendoring fakechroot into /app/.tools/fakechroot/" | arrow
cd $FAKECHROOT_BUILD
git clone git://github.com/fabiokung/fakechroot.git >/dev/null
cd fakechroot
./autogen.sh >/dev/null 2>&1
./configure --prefix=$BUILD_DIR/.tools/fakechroot >/dev/null
make >/dev/null
make install >/dev/null
echo "fakechroot vendored" | indent

cd $BUILDPACK_DIR
echo "Bootstraping a new base ubuntu lucid into /app/.root/" | arrow
mkdir -p $BUILD_DIR/.root
fakechroot -s fakeroot debootstrap --no-check-gpg --variant=fakechroot lucid $BUILD_DIR/.root >/dev/null
fakechroot fakeroot chroot $BUILD_DIR/.root apt-get install -y --force-yes gpgv >/dev/null 2>&1
echo "/app/.root bootstraped" | indent

sed -i -e "s/#force_color_prompt=yes/force_color_prompt=yes/" $BUILD_DIR/.root/root/.bashrc
echo "export PATH=/sbin:/usr/sbin:\$PATH" >> $BUILD_DIR/.root/root/.bashrc
echo "cd $HOME" >> $BUILD_DIR/.root/root/.bashrc

echo "Updating packages" | arrow
fakechroot fakeroot chroot $BUILD_DIR/.root bash -c "cat > /etc/apt/sources.list <<EOF
deb http://archive.ubuntu.com/ubuntu lucid main universe
deb http://archive.ubuntu.com/ubuntu lucid-security main
deb http://archive.ubuntu.com/ubuntu lucid-updates main
EOF"
fakechroot fakeroot chroot $BUILD_DIR/.root apt-get update >/dev/null
echo "packages updated" | indent


cd $BUILD_DIR/.root
ln -s ../ app

mkdir -p $BUILD_DIR/bin
cp $BUILDPACK_DIR/bin/fakesu $BUILD_DIR/bin
cp $BUILDPACK_DIR/bin/aws $BUILD_DIR/bin

echo "Fetching and installing skulltag binaries" | arrow
cd $CACHE_DIR

echo "Fetching base" | indent
if [ ! -f base.tar.bz2 ]; then
    wget -O base.tar.bz2 http://www.skulltag.com/download/files/release/st-v098d_linux-base.tar.bz2 > /dev/null 2>&1
fi
echo "Fetching platform specific" | indent
if [ ! -f 64bit.tar.bz2 ]; then
    wget -O 64bit.tar.bz2 http://www.skulltag.com/download/files/release/st-v098d_linux-x86_64.tar.bz2 > /dev/null 2>&1
fi

echo "Installing" | indent
tar xjf base.tar.bz2 -C $BUILD_DIR
tar xjf 64bit.tar.bz2 -C $BUILD_DIR

cd $ROOT_DIR
echo "Skulltag installed" | indent


echo "Installing dependencies" | arrow
fakechroot fakeroot chroot $BUILD_DIR/.root apt-get install -y libsdl1.2 libjpeg62 >/dev/null

echo "Preparing runtime configuration" | arrow
EXEC_CMD="/app/skulltag-server -host -private -port 10666"

if [ -f $BUILD_DIR/server.ini ]; then
    echo "Custom server.ini detected"
    EXEC_CMD="$EXEC_CMD +exec server.ini"
else
    echo "No server.ini found, using defaults"
fi | indent

if [ -f $BUILD_DIR/pwads.ini ]; then
    echo "Using pwads specified in pwads.ini"
else
    echo "No pwads specified, using all found in pwads/"
    od=`pwd`
    cd $BUILD_DIR
    for WAD in pwads/*.wad; do
        if [ "$WAD" != "pwads/*.wad" ]; then
            EXEC_CMD="$EXEC_CMD -file $WAD";
        fi
    done
    for WAD in pwads/*.WAD; do
        if [ "$WAD" != "pwads/*.WAD" ]; then
            EXEC_CMD="$EXEC_CMD -file $WAD";
        fi
    done
    cd $od
fi | indent



echo "Saving runtime configuration" | arrow
mkdir $BUILD_DIR/bin
echo $EXEC_CMD > $BUILD_DIR/bin/skulltag
chmod a+x $BUILD_DIR/bin/skulltag
