#!/bin/sh
set -e

ROOT_DIR=`pwd`
BUILD_DIR=$1
CACHE_DIR=$2

indent() {
    sed -u 's/^/       /'
}

arrow() {
    sed -u 's/^/-----> /'
}


mktmpdir() {
    dir=$(mktemp -t fakesu-$1-XXXX)
    rm -rf $dir
    mkdir -p $dir
    echo $dir
}

WGET_BUILD="$(mktmpdir wget)"
DEBOOTSTRAP_BUILD="$(mktmpdir debootstrap)"
FAKECHROOT_BUILD="$(mktmpdir fakechroot)"

mkdir -p $BUILD_DIR/.tools/fakechroot
mkdir -p $CACHE_DIR/.tools/debootstrap

export PATH=/sbin:/usr/sbin:$PATH:$CACHE_DIR/.tools/debootstrap/usr/sbin:$BUILD_DIR/.tools/fakechroot/sbin:$BUILD_DIR/.tools/fakechroot/bin
export DEBOOTSTRAP_DIR=$CACHE_DIR/.tools/debootstrap/usr/share/debootstrap

echo "Fetching and installing debootstrap" | arrow
echo "1" | indent
cd $DEBOOTSTRAP_BUILD
echo "2" | indent
# temporary workaround until I find a way to pull from repos that doesn't explode
curl -O http://ryangrieve.com/labs/debootstrap_1.0.38.tar.gz >/dev/null 2>&1
echo "3" | indent
tar zxvf debootstrap_1.0.38.tar.gz >/dev/null
echo "4" | indent
cd debootstrap
echo "5" | indent
DESTDIR=$CACHE_DIR/.tools/debootstrap fakeroot make >/dev/null
echo "6" | indent
DESTDIR=$CACHE_DIR/.tools/debootstrap fakeroot make install >/dev/null
echo "7" | indent
echo "debootstrap installed" | indent

echo "Fetching and installing skulltag binaries" | arrow
cd $CACHE_DIR

echo "Fetching base" | indent
if [ ! -f base.tar.bz2 ]; then
    wget -O base.tar.bz2 http://www.skulltag.com/download/files/release/st-v098d_linux-base.tar.bz2 > /dev/null 2>&1
fi
echo "Fetching platform specific" | indent
if [ ! -f 64bit.tar.bz2 ]; then
    wget -O 64bit.tar.bz2 http://www.skulltag.com/download/files/release/st-v098d_linux-x86_64.tar.bz2 > /dev/null 2>&1
fi

echo "Installing" | indent
tar xjf base.tar.bz2 -C $BUILD_DIR
tar xjf 64bit.tar.bz2 -C $BUILD_DIR

cd $ROOT_DIR
echo "Skulltag installed" | indent



echo "Installing dependencies" | arrow
# Can't apt-get on heroku obviously idiot, going to statically link
# apt-get -q install libjpeg62 2>&1| indent

echo "Preparing runtime configuration" | arrow
EXEC_CMD="/app/skulltag-server -host -private -port 10666"

if [ -f $BUILD_DIR/server.ini ]; then
    echo "Custom server.ini detected"
    EXEC_CMD="$EXEC_CMD +exec server.ini"
else
    echo "No server.ini found, using defaults"
fi | indent

if [ -f $BUILD_DIR/pwads.ini ]; then
    echo "Using pwads specified in pwads.ini"
else
    echo "No pwads specified, using all found in pwads/"
    od=`pwd`
    cd $BUILD_DIR
    for WAD in pwads/*.wad; do
        if [ "$WAD" != "pwads/*.wad" ]; then
            EXEC_CMD="$EXEC_CMD -file $WAD";
        fi
    done
    for WAD in pwads/*.WAD; do
        if [ "$WAD" != "pwads/*.WAD" ]; then
            EXEC_CMD="$EXEC_CMD -file $WAD";
        fi
    done
    cd $od
fi | indent



echo "Saving runtime configuration" | arrow
mkdir $BUILD_DIR/bin
echo $EXEC_CMD > $BUILD_DIR/bin/skulltag
chmod a+x $BUILD_DIR/bin/skulltag
